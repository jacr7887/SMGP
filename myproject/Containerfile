# Usa una imagen base de Python delgada y una versión estable como 3.10 o 3.11
# Python 3.13 es muy nuevo y podría no tener wheels para todas tus dependencias.
FROM python:3.11-slim
# FROM python:3.10-slim

# Establecer variables de entorno para Python
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PIP_NO_CACHE_DIR off # 'on' o 'off' para pip cache
ENV PIP_DISABLE_PIP_VERSION_CHECK on

# Establecer directorio de trabajo DENTRO del contenedor
WORKDIR /app

# Instalar dependencias del sistema necesarias
# libpq-dev es para psycopg2 (PostgreSQL).
# build-essential y gcc son por si algún paquete Python necesita compilar extensiones C.
# git por si algún paquete se instala desde un repo git.
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    build-essential \
    gcc \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copiar SOLO el archivo de requerimientos primero para aprovechar el cacheado de capas
# Asume que requirements.txt está en el contexto de construcción (myproject/)
COPY requirements.txt ./requirements.txt

# Instalar dependencias de Python
# Considera actualizar pip primero dentro del build
RUN pip install --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# Copiar el script de entrypoint al WORKDIR (/app) y darle permisos de ejecución
# Asume que entrypoint.sh está en el contexto de construcción (myproject/)
COPY entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh
# Alternativa: copiar a una ruta estándar y añadirla al PATH si fuera necesario
# COPY entrypoint.sh /usr/local/bin/entrypoint.sh
# RUN chmod +x /usr/local/bin/entrypoint.sh

# Copiar TODO el resto del código de la aplicación (desde el contexto myproject/)
# al WORKDIR (/app) dentro del contenedor.
# Esto incluirá myapp/, manage.py, myproject_config/ (con settings.py, wsgi.py) etc.
COPY . .
# Estructura resultante dentro de /app/:
# /app/manage.py
# /app/requirements.txt (copiado de nuevo, inofensivo)
# /app/entrypoint.sh (copiado de nuevo, inofensivo)
# /app/myapp/
# /app/myproject_config/ (o como se llame la carpeta de tu proyecto Django)
# etc.

# Exponer el puerto que usa tu aplicación (ej. 8000 para Gunicorn)
EXPOSE 8000

# Comando por defecto que se ejecuta cuando el contenedor inicia
ENTRYPOINT ["/app/entrypoint.sh"]
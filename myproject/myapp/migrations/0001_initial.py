# Generated by Django 5.2.3 on 2025-06-22 22:39

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import myapp.validators
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AfiliadoColectivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el registro de este afiliado colectivo (empresa) está activo.', verbose_name='Activo')),
                ('razon_social', models.CharField(db_index=True, help_text='Nombre legal completo de la empresa o institución.', max_length=255, verbose_name='Razón Social')),
                ('rif', models.CharField(blank=True, default=None, help_text='RIF de la empresa. Formato Requerido: Letra-8Números-1Número (Ej: J-12345678-9).', max_length=12, null=True, unique=True, validators=[myapp.validators.validate_rif], verbose_name='RIF')),
                ('tipo_empresa', models.CharField(choices=[('PUBLICA', 'Pública'), ('PRIVADA', 'Privada'), ('MIXTA', 'Mixta'), ('ONG', 'Organización No Gubernamental (ONG)'), ('COOPERATIVA', 'Cooperativa'), ('OTRA', 'Otra Tipo de Empresa'), ('SA', 'Sociedad Anónima'), ('CA', 'Compañía Anónima'), ('RL', 'Responsabilidad Limitada')], default='PRIVADA', help_text='Clasificación de la empresa (ej. Pública, Privada).', max_length=50, verbose_name='Tipo de Empresa')),
                ('direccion_comercial', models.TextField(blank=True, help_text='Ej: Av. Principal, Edif. Torreón, Piso 5, Municipio Chacao', null=True, verbose_name='Dirección Fiscal')),
                ('estado', models.CharField(choices=[('Amazonas', 'Amazonas'), ('Anzoátegui', 'Anzoátegui'), ('Apure', 'Apure'), ('Aragua', 'Aragua'), ('Barinas', 'Barinas'), ('Bolívar', 'Bolívar'), ('Carabobo', 'Carabobo'), ('Cojedes', 'Cojedes'), ('Delta Amacuro', 'Delta Amacuro'), ('Falcón', 'Falcón'), ('Guárico', 'Guárico'), ('Lara', 'Lara'), ('Mérida', 'Mérida'), ('Miranda', 'Miranda'), ('Monagas', 'Monagas'), ('Nueva Esparta', 'Nueva Esparta'), ('Portuguesa', 'Portuguesa'), ('Sucre', 'Sucre'), ('Táchira', 'Táchira'), ('Trujillo', 'Trujillo'), ('Vargas', 'Vargas'), ('Yaracuy', 'Yaracuy'), ('Zulia', 'Zulia'), ('Distrito Capital', 'Distrito Capital')], help_text='Estado o región donde se ubica la sede principal en Venezuela.', max_length=50, verbose_name='Estado')),
                ('municipio', models.CharField(blank=True, help_text='Municipio donde se ubica la sede (complementario al estado).', max_length=100, null=True, verbose_name='Municipio')),
                ('ciudad', models.CharField(blank=True, help_text='Ciudad donde se ubica la sede (complementario al estado/municipio).', max_length=100, null=True, verbose_name='Ciudad')),
                ('zona_postal', models.CharField(blank=True, help_text='Código postal venezolano de 4 dígitos (Ej: 1010).', max_length=4, null=True, verbose_name='Zona Postal')),
                ('telefono_contacto', models.CharField(blank=True, help_text='Número de teléfono principal de contacto. Formato: 04XX-XXXXXXX o 02XX-XXXXXXX.', max_length=15, null=True, validators=[myapp.validators.validate_telefono_venezuela], verbose_name='Teléfono Principal')),
                ('email_contacto', models.EmailField(blank=True, help_text='Correo electrónico principal de contacto de la empresa.', max_length=254, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Corporativo')),
            ],
            options={
                'verbose_name': 'Afiliado Colectivo',
                'verbose_name_plural': 'Afiliados Colectivos',
            },
        ),
        migrations.CreateModel(
            name='AfiliadoIndividual',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('tipo_identificacion', models.CharField(choices=[('CEDULA', 'Cédula de Identidad'), ('PASAPORTE', 'Pasaporte'), ('RIF', 'Registro de Información Fiscal (RIF)')], db_index=True, help_text='Tipo de documento de identidad principal del afiliado.', max_length=20, verbose_name='Tipo de Identificación')),
                ('cedula', models.CharField(db_index=True, help_text='Cédula de Identidad del afiliado. Formato: V-12345678 o E-8765432 (guion opcional).', max_length=10, unique=True, validators=[myapp.validators.validate_cedula], verbose_name='Cédula de Identidad')),
                ('estado_civil', models.CharField(choices=[('S', 'Soltero/a'), ('C', 'Casado/a'), ('V', 'Viudo/a'), ('D', 'Divorciado/a'), ('O', 'Otro')], db_index=True, default='S', help_text='Estado civil actual del afiliado.', max_length=50, verbose_name='Estado Civil')),
                ('sexo', models.CharField(choices=[('M', 'Masculino'), ('F', 'Femenino'), ('OTRO', 'Otro'), ('NO_BINARIO', 'No Binario'), ('SIN_ESPECIFICAR', 'Sin Especificar')], db_index=True, help_text='Sexo biológico del afiliado.', max_length=50, verbose_name='Sexo')),
                ('parentesco', models.CharField(choices=[('TITULAR', 'Titular'), ('CONYUGE', 'Cónyuge'), ('HIJO', 'Hijo(a)'), ('PADRE', 'Padre'), ('MADRE', 'Madre'), ('HERMANO', 'Hermano(a)'), ('OTRO', 'Otro Parentesco')], db_index=True, default='TITULAR', help_text='Relación del afiliado con el titular del contrato (si aplica, por defecto Titular).', max_length=50, verbose_name='Parentesco')),
                ('fecha_nacimiento', models.DateField(db_index=True, help_text='Fecha de nacimiento del afiliado. Formato: AAAA-MM-DD.', validators=[myapp.validators.validate_past_date], verbose_name='Fecha de Nacimiento')),
                ('nacionalidad', models.CharField(db_index=True, default='Venezolano', help_text='País de nacionalidad del afiliado.', max_length=50, verbose_name='Nacionalidad')),
                ('zona_postal', models.CharField(blank=True, help_text='Código postal venezolano de 4 dígitos (Ej: 1010).', max_length=4, null=True, verbose_name='Zona Postal')),
                ('estado', models.CharField(choices=[('Amazonas', 'Amazonas'), ('Anzoátegui', 'Anzoátegui'), ('Apure', 'Apure'), ('Aragua', 'Aragua'), ('Barinas', 'Barinas'), ('Bolívar', 'Bolívar'), ('Carabobo', 'Carabobo'), ('Cojedes', 'Cojedes'), ('Delta Amacuro', 'Delta Amacuro'), ('Falcón', 'Falcón'), ('Guárico', 'Guárico'), ('Lara', 'Lara'), ('Mérida', 'Mérida'), ('Miranda', 'Miranda'), ('Monagas', 'Monagas'), ('Nueva Esparta', 'Nueva Esparta'), ('Portuguesa', 'Portuguesa'), ('Sucre', 'Sucre'), ('Táchira', 'Táchira'), ('Trujillo', 'Trujillo'), ('Vargas', 'Vargas'), ('Yaracuy', 'Yaracuy'), ('Zulia', 'Zulia'), ('Distrito Capital', 'Distrito Capital')], db_index=True, help_text='Estado o región de residencia principal en Venezuela.', max_length=50, verbose_name='Estado')),
                ('municipio', models.CharField(blank=True, help_text='Municipio de residencia (complementario al estado).', max_length=100, null=True, verbose_name='Municipio')),
                ('ciudad', models.CharField(blank=True, help_text='Ciudad de residencia (complementario al estado/municipio).', max_length=100, null=True, verbose_name='Ciudad')),
                ('fecha_ingreso', models.DateField(blank=True, db_index=True, help_text='Fecha en que el afiliado ingresó al sistema o al contrato asociado.', null=True, verbose_name='Fecha de Ingreso')),
                ('direccion_habitacion', models.TextField(blank=True, help_text='Dirección completa de residencia. Mínimo 10 caracteres.', null=True, verbose_name='Dirección Habitación')),
                ('telefono_habitacion', models.CharField(blank=True, help_text='Teléfono de contacto residencial. Formato: 04XX-XXXXXXX o 02XX-XXXXXXX.', max_length=15, null=True, verbose_name='Teléfono Habitación')),
                ('email', models.EmailField(blank=True, help_text='Correo electrónico personal del afiliado (opcional).', max_length=254, null=True, verbose_name='Correo Electrónico')),
                ('direccion_oficina', models.TextField(blank=True, help_text='Dirección del lugar de trabajo del afiliado (opcional).', null=True, verbose_name='Dirección Oficina')),
                ('telefono_oficina', models.CharField(blank=True, help_text='Teléfono de contacto laboral. Formato: 04XX-XXXXXXX o 02XX-XXXXXXX.', max_length=15, null=True, verbose_name='Teléfono Oficina')),
                ('codigo_validacion', models.CharField(blank=True, editable=False, help_text='Código específico para validaciones periódicas (ej. Mes/Año).', max_length=100, null=True, verbose_name='Validación Mes/Año')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el afiliado está activo en el sistema.', verbose_name='Estado activo')),
            ],
            options={
                'verbose_name': 'Afiliado Individual',
                'verbose_name_plural': 'Afiliados Individuales',
                'ordering': ['primer_apellido', 'primer_nombre'],
            },
        ),
        migrations.CreateModel(
            name='LicenseInfo',
            fields=[
                ('id', models.PositiveIntegerField(default=1, editable=False, primary_key=True, serialize=False)),
                ('license_key', models.CharField(help_text='Clave de licencia activa.', max_length=512, unique=True)),
                ('expiry_date', models.DateField(help_text='Fecha de expiración de la licencia.')),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Información de Licencia',
                'verbose_name_plural': 'Información de Licencia',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('email', models.EmailField(error_messages={'unique': 'Este correo electrónico ya está registrado.'}, help_text='Correo electrónico único.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Correo Electrónico')),
                ('nivel_acceso', models.PositiveIntegerField(choices=[(1, 'Básico'), (2, 'Intermedio'), (3, 'Avanzado'), (4, 'Supervisor'), (5, 'Administrador')], db_index=True, default=1, help_text='Define los permisos base.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Nivel de Acceso')),
                ('tipo_usuario', models.CharField(choices=[('ADMIN', 'Administrador'), ('INTERMEDIARIO', 'Intermediario'), ('CLIENTE', 'Cliente'), ('AUDITOR', 'Auditor')], db_index=True, help_text='Clasificación funcional del usuario.', max_length=50, verbose_name='Tipo de Usuario')),
                ('activo', models.BooleanField(default=True, help_text='Controla si el usuario puede iniciar sesión (fuente de verdad).', verbose_name='Cuenta Activa (Personalizado)')),
                ('fecha_nacimiento', models.DateField(blank=True, db_index=True, null=True, validators=[myapp.validators.validate_past_date], verbose_name='Fecha de Nacimiento')),
                ('departamento', models.CharField(blank=True, choices=[('VENTAS', 'Ventas'), ('ADMINISTRACION', 'Administración'), ('OPERACIONES', 'Operaciones'), ('TECNOLOGIA', 'Tecnología'), ('LEGAL', 'Legal'), ('RECURSOS_HUMANOS', 'Recursos Humanos'), ('FINANZAS', 'Finanzas'), ('MERCADEO', 'Mercadeo'), ('SUSCRIPCION', 'Suscripción'), ('RECLAMOS', 'Reclamos'), ('AUDITORIA', 'Auditoría'), ('SERVICIO_AL_CLIENTE', 'Servicio al Cliente'), ('ACTUARIA', 'Actuaría'), ('CONTRALORIA', 'Contraloría'), ('OTRO', 'Otro')], db_index=True, max_length=50, null=True, verbose_name='Departamento')),
                ('telefono', models.CharField(blank=True, max_length=15, null=True, validators=[myapp.validators.validate_telefono_venezuela], verbose_name='Teléfono')),
                ('direccion', models.TextField(blank=True, null=True, verbose_name='Dirección')),
                ('username', models.CharField(editable=False, error_messages={'unique': 'Un usuario con ese nombre de usuario ya existe.'}, help_text='Requerido. Generado automáticamente si se omite.', max_length=150, unique=True, verbose_name='Nombre de usuario (interno)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario del Sistema',
                'verbose_name_plural': 'Usuarios del Sistema',
                'ordering': ['primer_apellido', 'primer_nombre', 'email'],
            },
        ),
        migrations.CreateModel(
            name='ContratoColectivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('ramo', models.CharField(choices=[('HCM', 'Hospitalización, Cirugía y Maternidad (HCM)'), ('VIDA', 'Vida'), ('VEHICULOS', 'Vehículos'), ('HOGAR', 'Hogar'), ('PYME', 'Pequeña y Mediana Empresa (PYME)'), ('ACCIDENTES_PERSONALES', 'Accidentes Personales'), ('SEPELIO', 'Sepelio'), ('VIAJES', 'Viajes'), ('EDUCATIVO', 'Educativo'), ('MASCOTAS', 'Mascotas'), ('OTROS', 'Otros Ramos')], db_index=True, help_text='Tipo de seguro o servicio cubierto por el contrato (ej. Salud, Vida, Automóvil).', max_length=50, verbose_name='Ramo del Contrato')),
                ('forma_pago', models.CharField(choices=[('MENSUAL', 'Mensual'), ('TRIMESTRAL', 'Trimestral'), ('SEMESTRAL', 'Semestral'), ('ANUAL', 'Anual'), ('CONTADO', 'Contado (Pago único)')], db_index=True, default='MENSUAL', help_text='Frecuencia con la que se realizan los pagos del contrato (ej. Mensual, Anual).', max_length=20, verbose_name='Forma de Pago')),
                ('pagos_realizados', models.PositiveIntegerField(blank=True, default=0, help_text='Número de pagos o cuotas abonadas para este contrato hasta la fecha.', verbose_name='Pagos Realizados')),
                ('estatus', models.CharField(choices=[('NO_VIGENTE_AUN', 'No Vigente Aún'), ('VIGENTE', 'Vigente'), ('VENCIDO', 'Vencido')], db_index=True, default='VIGENTE', help_text='Estado actual de la vigencia del contrato (ej. Vigente, Vencido, Anulado).', max_length=21, verbose_name='Estatus del Contrato')),
                ('estado_contrato', models.CharField(blank=True, choices=[('ACTIVO', 'Activo'), ('INACTIVO', 'Inactivo'), ('PENDIENTE', 'Pendiente'), ('VENCIDO', 'Vencido'), ('ANULADO', 'Anulado'), ('EN_REVISION', 'En Revisión'), ('BLOQUEADO', 'Bloqueado'), ('PRE_APROBADO', 'Pre-Aprobado'), ('RECHAZADO', 'Rechazado'), ('SUSPENDIDO', 'Suspendido'), ('EN_TRAMITE_RENOVACION', 'En Trámite de Renovación')], help_text='Estado administrativo o de proceso del contrato (ej. Renovación, Pendiente).', max_length=50, null=True, verbose_name='Estado Contrato')),
                ('suma_asegurada', models.DecimalField(blank=True, db_index=True, decimal_places=2, help_text='Monto máximo que la aseguradora pagaría por siniestros cubiertos bajo este contrato/póliza.', max_digits=17, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Suma Asegurada / Monto Cobertura')),
                ('historial_cambios', models.JSONField(blank=True, default=list, help_text='Registro estructurado de modificaciones importantes realizadas al contrato.', verbose_name='Historial de Cambios (Estructurado)')),
                ('numero_contrato', models.CharField(db_index=True, editable=False, help_text='Identificador único y secuencial asignado al contrato (generalmente automático).', max_length=50, unique=True, validators=[myapp.validators.validate_numero_contrato])),
                ('numero_poliza', models.CharField(db_index=True, editable=False, help_text='Número único de la póliza asociada al contrato (generalmente automático).', max_length=50, unique=True, verbose_name='Número de Póliza')),
                ('fecha_emision', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Fecha y hora en que se emitió oficialmente el contrato.', verbose_name='Fecha de Emisión del Contrato')),
                ('fecha_inicio_vigencia', models.DateField(blank=True, db_index=True, help_text='Fecha a partir de la cual el contrato entra en vigor (puede establecerse después).', null=True, verbose_name='Fecha de Inicio de Vigencia')),
                ('fecha_fin_vigencia', models.DateField(blank=True, db_index=True, help_text='Fecha en la que finaliza la vigencia del contrato (puede establecerse después).', null=True, verbose_name='Fecha de Fin de Vigencia')),
                ('periodo_vigencia_meses', models.PositiveIntegerField(blank=True, db_index=True, help_text='Número de meses de vigencia. Si se indica, la Fecha Fin se calcula automáticamente.', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Duración del Contrato (Meses)')),
                ('monto_total', models.DecimalField(blank=True, decimal_places=2, help_text='Costo total del contrato para el período de vigencia especificado.', max_digits=15, null=True, verbose_name='Monto Total del Contrato')),
                ('consultar_afiliados_activos', models.BooleanField(default=False, help_text='Indica si la información de este contrato debe cruzarse con la base de datos de afiliados activos.', verbose_name='Consultar en data de afiliados activos')),
                ('certificado', models.CharField(blank=True, editable=False, help_text='Número de certificado único asociado (auto-generado o manual).', max_length=20, null=True, unique=True, validators=[myapp.validators.validate_certificado], verbose_name='Número de Certificado')),
                ('activo', models.BooleanField(default=True, help_text='Indica si este registro de contrato colectivo está activo en el sistema.', verbose_name='Estado activo')),
                ('tipo_empresa', models.CharField(choices=[('PUBLICA', 'Pública'), ('PRIVADA', 'Privada'), ('MIXTA', 'Mixta'), ('ONG', 'Organización No Gubernamental (ONG)'), ('COOPERATIVA', 'Cooperativa'), ('OTRA', 'Otra Tipo de Empresa'), ('SA', 'Sociedad Anónima'), ('CA', 'Compañía Anónima'), ('RL', 'Responsabilidad Limitada')], db_index=True, default='PRIVADA', help_text='Clasificación de la empresa contratante.', max_length=50, verbose_name='Tipo de Empresa')),
                ('criterio_busqueda', models.CharField(blank=True, help_text='Campo adicional para búsquedas o filtros personalizados.', max_length=100, null=True, verbose_name='Criterio de Búsqueda')),
                ('razon_social', models.CharField(db_index=True, help_text='Nombre legal completo de la empresa contratante.', max_length=255, null=True, verbose_name='Razón Social de la Empresa')),
                ('rif', models.CharField(blank=True, db_index=True, help_text='RIF de la empresa contratante (copiado automáticamente).', max_length=12, null=True, validators=[myapp.validators.validate_rif], verbose_name='RIF de la Empresa (Copiado)')),
                ('cantidad_empleados', models.IntegerField(db_index=True, help_text='Número total de empleados cubiertos o elegibles bajo este contrato.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cantidad de Empleados')),
                ('direccion_comercial', models.TextField(blank=True, help_text='Dirección principal o fiscal de la empresa contratante.', null=True, verbose_name='Dirección Comercial')),
                ('zona_postal', models.CharField(blank=True, db_index=True, help_text='Código postal venezolano de 4 dígitos (Ej: 1010).', max_length=4, null=True, verbose_name='Zona Postal')),
                ('plan_contratado', models.CharField(blank=True, help_text='Nombre o código del plan de cobertura específico adquirido para el colectivo.', max_length=255, null=True, verbose_name='Plan Contratado')),
                ('numero_recibo', models.CharField(blank=True, db_index=True, editable=False, help_text='Formato: REC-COL-XXXXXXXX (Auto-generado).', max_length=50, unique=True, verbose_name='Número de Recibo Colectivo')),
                ('comision_recibo', models.DecimalField(blank=True, decimal_places=2, help_text='Monto numérico de la comisión asociada a este recibo específico.', max_digits=15, null=True, verbose_name='Comisión del Recibo')),
                ('codigo_validacion', models.CharField(blank=True, db_index=True, editable=False, help_text='Código específico para validaciones periódicas (ej. Mes/Año).', max_length=100, null=True, verbose_name='Validación Mes/Año')),
                ('afiliados_colectivos', models.ManyToManyField(blank=True, help_text='Empresas o grupos afiliados vinculados a este contrato colectivo.', related_name='contratos_afiliados', to='myapp.afiliadocolectivo', verbose_name='Afiliados asociados')),
            ],
            options={
                'verbose_name': 'Contrato Colectivo',
                'verbose_name_plural': 'Contratos Colectivos',
                'ordering': ['-fecha_emision'],
            },
        ),
        migrations.CreateModel(
            name='ContratoIndividual',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('ramo', models.CharField(choices=[('HCM', 'Hospitalización, Cirugía y Maternidad (HCM)'), ('VIDA', 'Vida'), ('VEHICULOS', 'Vehículos'), ('HOGAR', 'Hogar'), ('PYME', 'Pequeña y Mediana Empresa (PYME)'), ('ACCIDENTES_PERSONALES', 'Accidentes Personales'), ('SEPELIO', 'Sepelio'), ('VIAJES', 'Viajes'), ('EDUCATIVO', 'Educativo'), ('MASCOTAS', 'Mascotas'), ('OTROS', 'Otros Ramos')], db_index=True, help_text='Tipo de seguro o servicio cubierto por el contrato (ej. Salud, Vida, Automóvil).', max_length=50, verbose_name='Ramo del Contrato')),
                ('forma_pago', models.CharField(choices=[('MENSUAL', 'Mensual'), ('TRIMESTRAL', 'Trimestral'), ('SEMESTRAL', 'Semestral'), ('ANUAL', 'Anual'), ('CONTADO', 'Contado (Pago único)')], db_index=True, default='MENSUAL', help_text='Frecuencia con la que se realizan los pagos del contrato (ej. Mensual, Anual).', max_length=20, verbose_name='Forma de Pago')),
                ('pagos_realizados', models.PositiveIntegerField(blank=True, default=0, help_text='Número de pagos o cuotas abonadas para este contrato hasta la fecha.', verbose_name='Pagos Realizados')),
                ('estatus', models.CharField(choices=[('NO_VIGENTE_AUN', 'No Vigente Aún'), ('VIGENTE', 'Vigente'), ('VENCIDO', 'Vencido')], db_index=True, default='VIGENTE', help_text='Estado actual de la vigencia del contrato (ej. Vigente, Vencido, Anulado).', max_length=21, verbose_name='Estatus del Contrato')),
                ('estado_contrato', models.CharField(blank=True, choices=[('ACTIVO', 'Activo'), ('INACTIVO', 'Inactivo'), ('PENDIENTE', 'Pendiente'), ('VENCIDO', 'Vencido'), ('ANULADO', 'Anulado'), ('EN_REVISION', 'En Revisión'), ('BLOQUEADO', 'Bloqueado'), ('PRE_APROBADO', 'Pre-Aprobado'), ('RECHAZADO', 'Rechazado'), ('SUSPENDIDO', 'Suspendido'), ('EN_TRAMITE_RENOVACION', 'En Trámite de Renovación')], help_text='Estado administrativo o de proceso del contrato (ej. Renovación, Pendiente).', max_length=50, null=True, verbose_name='Estado Contrato')),
                ('suma_asegurada', models.DecimalField(blank=True, db_index=True, decimal_places=2, help_text='Monto máximo que la aseguradora pagaría por siniestros cubiertos bajo este contrato/póliza.', max_digits=17, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Suma Asegurada / Monto Cobertura')),
                ('historial_cambios', models.JSONField(blank=True, default=list, help_text='Registro estructurado de modificaciones importantes realizadas al contrato.', verbose_name='Historial de Cambios (Estructurado)')),
                ('numero_contrato', models.CharField(db_index=True, editable=False, help_text='Identificador único y secuencial asignado al contrato (generalmente automático).', max_length=50, unique=True, validators=[myapp.validators.validate_numero_contrato])),
                ('numero_poliza', models.CharField(db_index=True, editable=False, help_text='Número único de la póliza asociada al contrato (generalmente automático).', max_length=50, unique=True, verbose_name='Número de Póliza')),
                ('fecha_emision', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Fecha y hora en que se emitió oficialmente el contrato.', verbose_name='Fecha de Emisión del Contrato')),
                ('fecha_inicio_vigencia', models.DateField(blank=True, db_index=True, help_text='Fecha a partir de la cual el contrato entra en vigor (puede establecerse después).', null=True, verbose_name='Fecha de Inicio de Vigencia')),
                ('fecha_fin_vigencia', models.DateField(blank=True, db_index=True, help_text='Fecha en la que finaliza la vigencia del contrato (puede establecerse después).', null=True, verbose_name='Fecha de Fin de Vigencia')),
                ('periodo_vigencia_meses', models.PositiveIntegerField(blank=True, db_index=True, help_text='Número de meses de vigencia. Si se indica, la Fecha Fin se calcula automáticamente.', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Duración del Contrato (Meses)')),
                ('monto_total', models.DecimalField(blank=True, decimal_places=2, help_text='Costo total del contrato para el período de vigencia especificado.', max_digits=15, null=True, verbose_name='Monto Total del Contrato')),
                ('consultar_afiliados_activos', models.BooleanField(default=False, help_text='Indica si la información de este contrato debe cruzarse con la base de datos de afiliados activos.', verbose_name='Consultar en data de afiliados activos')),
                ('activo', models.BooleanField(default=True, help_text='Indica si este registro de contrato individual está activo en el sistema.', verbose_name='Estado activo')),
                ('tipo_identificacion_contratante', models.CharField(choices=[('CEDULA', 'Cédula de Identidad'), ('PASAPORTE', 'Pasaporte'), ('RIF', 'Registro de Información Fiscal (RIF)')], help_text='Tipo de documento (Cédula o RIF) de la persona o entidad que paga el contrato.', max_length=20, verbose_name='Tipo de Identificación del Contratante')),
                ('contratante_cedula', models.CharField(db_index=True, help_text='Cédula o RIF de quien paga. Introduzca V/E + 7-8 dígitos (Cédula) o J/G/V/E + 8 dígitos + verificador (RIF, formato con guiones requerido).', max_length=15, verbose_name='Cédula/RIF del Contratante')),
                ('contratante_nombre', models.CharField(help_text='Nombre completo o razón social de quien paga el contrato.', max_length=255, verbose_name='Nombre del Contratante')),
                ('direccion_contratante', models.TextField(blank=True, help_text='Dirección fiscal o principal del contratante.', null=True, verbose_name='Dirección del Contratante')),
                ('telefono_contratante', models.CharField(blank=True, help_text='Teléfono de contacto del contratante. Formato: 04XX-XXXXXXX o 02XX-XXXXXXX.', max_length=15, null=True, verbose_name='Teléfono del Contratante')),
                ('email_contratante', models.EmailField(blank=True, help_text='Correo electrónico principal del contratante.', max_length=254, null=True, verbose_name='Email del Contratante')),
                ('plan_contratado', models.CharField(blank=True, help_text='Nombre o código del plan de cobertura específico adquirido.', max_length=255, null=True, verbose_name='Plan Contratado')),
                ('numero_recibo', models.CharField(blank=True, db_index=True, editable=False, help_text='Formato: REC-IND-XXXXXXXX (Auto-generado).', max_length=50, unique=True, verbose_name='Número de Recibo Individual')),
                ('comision_recibo', models.DecimalField(blank=True, decimal_places=2, help_text='Monto (o porcentaje) de la comisión calculado por recibo (si aplica).', max_digits=5, null=True)),
                ('certificado', models.CharField(blank=True, db_index=True, editable=False, help_text='Formato: CERT-IND-XXXXXX (Auto-generado).', max_length=50, null=True, unique=True, verbose_name='Número de Certificado')),
                ('fecha_inicio_vigencia_recibo', models.DateField(blank=True, help_text='Fecha de inicio de la cobertura del recibo actual o próximo.', null=True, verbose_name='Fecha Inicio Vigencia Recibo')),
                ('fecha_fin_vigencia_recibo', models.DateField(blank=True, help_text='Fecha de fin de la cobertura del recibo actual o próximo.', null=True, verbose_name='Fecha Fin Vigencia Recibo')),
                ('criterio_busqueda', models.CharField(blank=True, help_text='Campo adicional para búsquedas o filtros personalizados.', max_length=255, null=True, verbose_name='Criterio de Búsqueda')),
                ('dias_transcurridos_ingreso', models.IntegerField(blank=True, help_text='Número de días desde que el afiliado ingresó (calculado o registrado).', null=True, verbose_name='Días transcurridos desde ingreso')),
                ('estatus_detalle', models.TextField(blank=True, help_text='Descripción más detallada del estado actual del contrato.', null=True, verbose_name='Estatus Detallado')),
                ('estatus_emision_recibo', models.CharField(choices=[('SIN_EMITIR', 'Sin Emitir'), ('EMITIDO', 'Emitido')], db_index=True, default='SIN_EMITIR', help_text='Indica si el recibo actual o próximo ha sido generado.', max_length=20, verbose_name='Estatus de Emisión del Recibo')),
                ('afiliado', models.ForeignKey(help_text='Afiliado individual principal cubierto por este contrato.', on_delete=django.db.models.deletion.PROTECT, related_name='contratos', to='myapp.afiliadoindividual', verbose_name='Afiliado Individual')),
            ],
            options={
                'verbose_name': 'Contrato Individual',
                'verbose_name_plural': 'Contratos Individuales',
                'ordering': ['-fecha_emision'],
                'permissions': [('can_anular_contrato', 'Puede anular contratos'), ('can_renovar_contrato', 'Puede renovar contratos')],
            },
        ),
        migrations.CreateModel(
            name='Intermediario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el intermediario está activo en el sistema.', verbose_name='Estado activo')),
                ('codigo', models.CharField(blank=True, db_index=True, editable=False, help_text='Formato: INT-XXXXXX (Auto-generado).', max_length=15, unique=True, verbose_name='Código de Intermediario')),
                ('nombre_completo', models.CharField(db_index=True, help_text='Nombre completo o razón social del intermediario.', max_length=255, verbose_name='Nombre Completo del Intermediario')),
                ('rif', models.CharField(blank=True, db_index=True, help_text='Formato Requerido: Letra-8Números-1Número (Ej: J-12345678-9).', max_length=12, null=True, validators=[myapp.validators.validate_rif], verbose_name='RIF')),
                ('direccion_fiscal', models.TextField(blank=True, help_text='Dirección fiscal registrada del intermediario.', null=True, verbose_name='Dirección Fiscal')),
                ('telefono_contacto', models.CharField(blank=True, help_text='Formato: 04XX-XXXXXXX o 02XX-XXXXXXX.', max_length=15, null=True, verbose_name='Teléfono de Contacto')),
                ('email_contacto', models.EmailField(blank=True, db_index=True, help_text='Correo electrónico principal de contacto del intermediario.', max_length=254, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email de Contacto')),
                ('porcentaje_comision', models.DecimalField(db_index=True, decimal_places=2, default=Decimal('0.00'), help_text='Porcentaje de comisión asignado. Entre 0.00 y 50.00 (o 100.00).', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('50.00'))], verbose_name='Porcentaje de Comisión')),
                ('porcentaje_override', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Porcentaje adicional que este intermediario gana sobre las ventas de sus intermediarios subordinados (si aplica).', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('20.00'))], verbose_name='Porcentaje de Override')),
                ('intermediario_relacionado', models.ForeignKey(blank=True, help_text='Intermediario principal o supervisor al que reporta este (si aplica).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_intermediarios', to='myapp.intermediario', verbose_name='Intermediario Padre/Relacionado')),
                ('usuarios', models.ManyToManyField(blank=True, help_text='Usuarios del sistema autorizados a gestionar o ver información de este intermediario.', related_name='intermediarios_gestionados', to=settings.AUTH_USER_MODEL, verbose_name='Usuarios que gestionan este Intermediario')),
            ],
            options={
                'verbose_name': 'Intermediario',
                'verbose_name_plural': 'Intermediarios',
            },
        ),
        migrations.CreateModel(
            name='Factura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el registro de esta factura está activo/visible en el sistema.', verbose_name='Estado activo')),
                ('estatus_factura', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('PAGADA', 'Pagada'), ('VENCIDA', 'Vencida')], db_index=True, default='GENERADA', help_text='Estado del ciclo de vida de la factura.', max_length=50, verbose_name='Estatus de Factura')),
                ('vigencia_recibo_desde', models.DateField(db_index=True, help_text='Fecha de inicio del período de cobertura que cubre esta factura.', verbose_name='Vigencia Recibo Desde')),
                ('vigencia_recibo_hasta', models.DateField(db_index=True, help_text='Fecha de fin del período de cobertura que cubre esta factura.', verbose_name='Vigencia Recibo Hasta')),
                ('monto', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monto base (subtotal) de la factura.', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('monto_pendiente', models.DecimalField(db_index=True, decimal_places=2, default=Decimal('0.00'), editable=False, help_text='Saldo restante por pagar de esta factura (calculado automáticamente).', max_digits=15, verbose_name='Monto Pendiente')),
                ('numero_recibo', models.CharField(blank=True, db_index=True, editable=False, help_text='Formato: REC-XXXXXXXXX (Auto-generado).', max_length=50, unique=True, verbose_name='Número de Recibo')),
                ('dias_periodo_cobro', models.IntegerField(blank=True, help_text='Duración en días del período que cubre la factura (calculado o manual).', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Días del período de cobro')),
                ('estatus_emision', models.CharField(choices=[('SIN_EMITIR', 'Sin Emitir'), ('EMITIDO', 'Emitido')], default='SIN_EMITIR', help_text='Estado de la generación del documento físico o digital de la factura.', max_length=20, verbose_name='Estatus de Emisión')),
                ('pagada', models.BooleanField(db_index=True, default=False, editable=False, help_text='Indica si la factura ha sido completamente pagada (calculado automáticamente).', verbose_name='Pagada')),
                ('relacion_ingreso', models.CharField(blank=True, db_index=True, editable=False, help_text='Formato: RI-XXXXXXXXXX (Auto-generado).', max_length=50, null=True, verbose_name='N° Relación de Ingreso')),
                ('recibos_pendientes_cache', models.PositiveIntegerField(db_index=True, default=0, editable=False, help_text='Campo interno para optimización. ¡Requiere lógica explícita para mantenerlo actualizado!')),
                ('aplica_igtf', models.BooleanField(default=False, help_text='Marcar si la transacción asociada a esta factura cumple las condiciones para aplicar IGTF. (Informativo)', verbose_name='¿Condiciones para IGTF presentes?')),
                ('observaciones', models.TextField(blank=True, help_text='Notas o comentarios adicionales específicos de esta factura.', null=True, verbose_name='Observaciones de la Factura')),
                ('contrato_colectivo', models.ForeignKey(blank=True, help_text='Contrato colectivo al que corresponde esta factura (si aplica).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='factura_set', to='myapp.contratocolectivo')),
                ('contrato_individual', models.ForeignKey(blank=True, help_text='Contrato individual al que corresponde esta factura (si aplica).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='factura_set', to='myapp.contratoindividual')),
                ('intermediario', models.ForeignKey(blank=True, help_text='Intermediario asociado a la factura (puede heredar del contrato).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='facturas', to='myapp.intermediario', verbose_name='Intermediario')),
            ],
            options={
                'verbose_name': 'Factura',
                'verbose_name_plural': 'Facturas',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.AddField(
            model_name='contratoindividual',
            name='intermediario',
            field=models.ForeignKey(help_text='Intermediario responsable de la gestión o venta de este contrato.', on_delete=django.db.models.deletion.PROTECT, to='myapp.intermediario', verbose_name='Intermediario'),
        ),
        migrations.AddField(
            model_name='contratocolectivo',
            name='intermediario',
            field=models.ForeignKey(blank=True, help_text='Intermediario responsable de la gestión o venta de este contrato.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contratos_colectivos', to='myapp.intermediario', verbose_name='Intermediario'),
        ),
        migrations.AddField(
            model_name='afiliadoindividual',
            name='intermediario',
            field=models.ForeignKey(blank=True, help_text='Intermediario directamente asignado a la gestión de este afiliado individual (si aplica).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='afiliados_individuales_asignados', to='myapp.intermediario', verbose_name='Intermediario Asignado Directamente'),
        ),
        migrations.AddField(
            model_name='afiliadocolectivo',
            name='intermediario',
            field=models.ForeignKey(blank=True, help_text='Intermediario directamente asignado a la gestión de esta empresa (si aplica).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='afiliados_colectivos_asignados', to='myapp.intermediario', verbose_name='Intermediario Asignado Directamente'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='intermediario',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios_asignados', to='myapp.intermediario', verbose_name='Intermediario Asociado'),
        ),
        migrations.CreateModel(
            name='Notificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mensaje', models.TextField(verbose_name='Mensaje')),
                ('tipo', models.CharField(choices=[('info', 'Información'), ('success', 'Éxito'), ('warning', 'Advertencia'), ('error', 'Error'), ('system', 'Sistema')], default='info', max_length=10, verbose_name='Tipo')),
                ('url_destino', models.CharField(blank=True, max_length=500, null=True, verbose_name='URL Destino')),
                ('leida', models.BooleanField(db_index=True, default=False, verbose_name='Leída')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Fecha Creación')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notificaciones', to=settings.AUTH_USER_MODEL, verbose_name='Usuario Destino')),
            ],
            options={
                'verbose_name': 'Notificación',
                'verbose_name_plural': 'Notificaciones',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='Reclamacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('numero_reclamacion', models.CharField(blank=True, db_index=True, editable=False, help_text='Identificador único de la reclamación (Auto-generado).', max_length=50, unique=True, verbose_name='Número de Reclamación')),
                ('activo', models.BooleanField(db_index=True, default=True, help_text='Indica si el registro de esta reclamación está activo/visible en el sistema.', verbose_name='¿Reclamación activa?')),
                ('tipo_reclamacion', models.CharField(choices=[('MEDICA', 'Reclamación Médica'), ('ADMINISTRATIVA', 'Reclamación Administrativa'), ('LEGAL', 'Reclamación Legal'), ('FINANCIERA', 'Reclamación Financiera'), ('SERVICIO', 'Reclamación de Servicio'), ('OTRA', 'Otro Tipo de Reclamación')], db_index=True, default='MEDICA', help_text='Naturaleza de la reclamación (ej. Médica, Dental, Administrativa).', max_length=50, verbose_name='Tipo de Reclamación')),
                ('diagnostico_principal', models.CharField(blank=True, choices=[('', '--------- SELECCIONE ---------'), ('SAL-CON-001', 'Consulta Médica General / Atención Primaria'), ('SAL-CON-002', 'Consulta Médica Especializada (Cardiología)'), ('SAL-CON-003', 'Consulta Médica Especializada (Dermatología)'), ('SAL-CON-004', 'Consulta Médica Especializada (Endocrinología)'), ('SAL-CON-005', 'Consulta Médica Especializada (Gastroenterología)'), ('SAL-CON-006', 'Consulta Médica Especializada (Ginecología/Obstetricia)'), ('SAL-CON-007', 'Consulta Médica Especializada (Infectología)'), ('SAL-CON-008', 'Consulta Médica Especializada (Neumología)'), ('SAL-CON-009', 'Consulta Médica Especializada (Neurología)'), ('SAL-CON-010', 'Consulta Médica Especializada (Oftalmología)'), ('SAL-CON-011', 'Consulta Médica Especializada (Oncología)'), ('SAL-CON-012', 'Consulta Médica Especializada (Otorrinolaringología - ORL)'), ('SAL-CON-013', 'Consulta Médica Especializada (Pediatría)'), ('SAL-CON-014', 'Consulta Médica Especializada (Psiquiatría)'), ('SAL-CON-015', 'Consulta Médica Especializada (Reumatología)'), ('SAL-CON-016', 'Consulta Médica Especializada (Traumatología/Ortopedia)'), ('SAL-CON-017', 'Consulta Médica Especializada (Urología)'), ('SAL-CON-018', 'Consulta Médica Especializada (Nefrología)'), ('SAL-CON-019', 'Consulta Médica Especializada (Nutrición/Dietética)'), ('SAL-CON-020', 'Consulta Médica Domiciliaria'), ('SAL-CON-021', 'Consulta Preoperatoria / Evaluación Cardiovascular'), ('SAL-CON-022', 'Consulta Postoperatoria'), ('SAL-CON-023', 'Consulta de Emergencia / Sala de Urgencias'), ('SAL-CON-024', 'Consulta de Salud Mental / Psicología'), ('SAL-CON-025', 'Segunda Opinión Médica'), ('SAL-CON-026', 'Consulta Médica Especializada (Angiología/Cirugía Vascular)'), ('SAL-CON-027', 'Consulta Médica Especializada (Alergología/Inmunología)'), ('SAL-CON-028', 'Consulta Médica Especializada (Geriatría)'), ('SAL-CON-029', 'Consulta Medicina del Deporte'), ('SAL-EST-001', 'Exámenes de Laboratorio (Hematología, Química, Orina, Heces)'), ('SAL-EST-002', 'Perfil Lipídico / Perfil 20 / Renal / Hepático'), ('SAL-EST-003', 'Hemoglobina Glicosilada (HbA1c) / Glucemia'), ('SAL-EST-004', 'Pruebas de Función Tiroidea (TSH, T3, T4, Anticuerpos)'), ('SAL-EST-005', 'Marcadores Tumorales (CEA, PSA, CA-125, etc.)'), ('SAL-EST-006', 'Pruebas de Coagulación (TP, TPT, INR, Fibrinógeno)'), ('SAL-EST-007', 'Cultivos (Urocultivo, Hemocultivo, Coprocultivo, Secreciones)'), ('SAL-EST-008', 'Radiografía (Rayos X - Tórax, Huesos, Abdomen, etc.)'), ('SAL-EST-009', 'Ecografía / Ultrasonido (Abdominal, Pélvico, Tiroideo, Doppler, etc.)'), ('SAL-EST-010', 'Tomografía Axial Computarizada (TAC/TC - Con/Sin Contraste)'), ('SAL-EST-011', 'Resonancia Magnética Nuclear (RMN - Con/Sin Contraste)'), ('SAL-EST-012', 'Mamografía / Ecosonograma Mamario / Tomosíntesis'), ('SAL-EST-013', 'Densitometría Ósea (DEXA)'), ('SAL-EST-014', 'Electrocardiograma (ECG/EKG) en Reposo'), ('SAL-EST-015', 'Ecocardiograma Transtorácico / Transesofágico'), ('SAL-EST-016', 'Prueba de Esfuerzo / Ergometría Cardiológica'), ('SAL-EST-017', 'Holter de Ritmo (24/48h) / Holter de Tensión (MAPA)'), ('SAL-EST-018', 'Endoscopia Digestiva Superior / Gastroscopia (con Biopsia)'), ('SAL-EST-019', 'Colonoscopia / Rectosigmoidoscopia (con Biopsia/Polipectomía)'), ('SAL-EST-020', 'Espirometría Basal y Post-Broncodilatador / DLCO'), ('SAL-EST-021', 'Electroencefalograma (EEG) / Mapeo Cerebral'), ('SAL-EST-022', 'Electromiografía (EMG) / Neuroconducción / Potenciales Evocados'), ('SAL-EST-023', 'Biopsia Percutánea / Endoscópica / Quirúrgica (Especificar)'), ('SAL-EST-024', 'Estudios Oftalmológicos (Fondo de Ojo, Campo Visual, OCT, Angiografía)'), ('SAL-EST-025', 'Estudios Auditivos (Audiometría, Impedanciometría, Otoemisiones)'), ('SAL-EST-026', 'Papanicolaou / Citología Ginecológica / Colposcopia / Test VPH'), ('SAL-EST-027', 'Estudios Genéticos / Cariotipo / Pruebas de Paternidad'), ('SAL-EST-028', 'Pruebas Alérgicas (Prick Test, Patch Test, IgE Específica)'), ('SAL-EST-029', 'Gammagrafía / Estudios Medicina Nuclear (Ósea, Tiroidea, Renal)'), ('SAL-EST-030', 'PET-Scan / PET-CT Oncológico'), ('SAL-EST-031', 'Dímero-D / Productos Degradación Fibrina'), ('SAL-EST-032', 'Estudios Inmunológicos (ANA, FR, Complemento, etc.)'), ('SAL-EST-033', 'Video-Nistagmografía (VNG - Estudio Vértigo)'), ('SAL-EST-034', 'Polisomnografía (Estudio del Sueño)'), ('SAL-EST-035', 'AngioTAC / AngioResonancia'), ('SAL-EST-036', 'Manometría Esofágica / pHmetría'), ('SAL-PRO-001', 'Tratamiento Médico Ambulatorio (Farmacia)'), ('SAL-PRO-002', 'Hospitalización (Médica)'), ('SAL-PRO-003', 'Hospitalización (Quirúrgica)'), ('SAL-PRO-004', 'Cirugía Mayor (Especificar Procedimiento)'), ('SAL-PRO-005', 'Cirugía Menor / Ambulatoria (Especificar Procedimiento)'), ('SAL-PRO-006', 'Quimioterapia (Ciclos, Medicamentos)'), ('SAL-PRO-007', 'Radioterapia (Sesiones, Tipo)'), ('SAL-PRO-008', 'Inmunoterapia / Terapia Biológica'), ('SAL-PRO-009', 'Diálisis / Hemodiálisis / Diálisis Peritoneal'), ('SAL-PRO-010', 'Fisioterapia / Rehabilitación Física'), ('SAL-PRO-011', 'Terapia Respiratoria / Oxigenoterapia'), ('SAL-PRO-012', 'Terapia Ocupacional'), ('SAL-PRO-013', 'Terapia del Lenguaje / Fonoaudiología'), ('SAL-PRO-014', 'Psicoterapia / Terapia Psicológica'), ('SAL-PRO-015', 'Administración de Medicamentos (IV, IM, SC)'), ('SAL-PRO-016', 'Curación de Heridas Complejas / Escaras'), ('SAL-PRO-017', 'Colocación / Retiro de Yeso / Férula'), ('SAL-PRO-018', 'Colocación / Retiro de Sonda / Catéter / Drenaje'), ('SAL-PRO-019', 'Transfusión Sanguínea / Hemoderivados'), ('SAL-PRO-020', 'Nutrición Parenteral / Enteral Especializada'), ('SAL-PRO-021', 'Manejo del Dolor Crónico / Unidad del Dolor'), ('SAL-PRO-022', 'Cuidados Paliativos / Hospicio'), ('SAL-PRO-023', 'Procedimientos Dermatológicos (Crioterpia, Láser, etc.)'), ('SAL-PRO-024', 'Procedimientos Oftalmológicos (Inyección Intravítrea, Láser)'), ('SAL-PRO-025', 'Procedimientos Cardiológicos (Cateterismo, Angioplastia)'), ('SAL-PRO-026', 'Adquisición/Alquiler Equipos Médicos (CPAP, Silla Ruedas)'), ('SAL-PRO-027', 'Tratamiento de Fertilidad (Si cubierto)'), ('SAL-PRO-028', 'Trasplante de Órganos / Médula Ósea'), ('SAL-PRO-029', 'Cirugía Laparoscópica / Mínimamente Invasiva (Especificar)'), ('SAL-PRO-030', 'Cirugía Robótica (Especificar)'), ('SAL-PRO-031', 'Cirugía Bariátrica (Bypass, Manga Gástrica - Si cubierto)'), ('SAL-PRO-032', 'Procedimientos de Radiología Intervencionista (Angioplastia, Embolización)'), ('SAL-PRO-033', 'Infiltraciones Articulares / Bloqueos Nerviosos'), ('SAL-PRO-034', 'Terapias Alternativas / Complementarias (Acupuntura, Quiropráctica - Si cubierto)'), ('SAL-PRO-035', 'Implante / Explante de Dispositivos Médicos (Marcapasos, DIU, etc.)'), ('SAL-MAT-001', 'Control Prenatal'), ('SAL-MAT-002', 'Parto Normal / Cesárea'), ('SAL-MAT-003', 'Complicaciones del Embarazo (Preeclampsia, Diabetes Gestacional, etc.)'), ('SAL-MAT-004', 'Atención Neonatal / Retén / UCI Neonatal'), ('SAL-MAT-005', 'Aborto (Espontáneo / Terapéutico / Inducido)'), ('SAL-MAT-006', 'Embarazo Ectópico / Molar'), ('SAL-DXG-001', 'Enfermedad Cardiovascular (Hipertensión, Cardiopatía Isquémica, Arritmia)'), ('SAL-DXG-002', 'Enfermedad Respiratoria (Asma, EPOC, Neumonía, Bronquitis)'), ('SAL-DXG-003', 'Enfermedad Digestiva (Gastritis, Úlcera, Reflujo, Colon Irritable, Enf. Inflamatoria)'), ('SAL-DXG-004', 'Enfermedad Neurológica (Migraña, ACV, Epilepsia, Parkinson, Alzheimer)'), ('SAL-DXG-005', 'Enfermedad Endocrina/Metabólica (Diabetes Mellitus, Hipotiroidismo, Hipertiroidismo)'), ('SAL-DXG-006', 'Enfermedad Renal/Urológica (Insuficiencia Renal, Litiasis, ITU, Próstata)'), ('SAL-DXG-007', 'Enfermedad Ginecológica (Miomas, Endometriosis, SOP, Infecciones)'), ('SAL-DXG-008', 'Enfermedad Oncológica (Cáncer - Especificar Tipo/Localización Inicial)'), ('SAL-DXG-009', 'Enfermedad Reumatológica/Autoinmune (Artritis Reumatoide, Lupus, Fibromialgia)'), ('SAL-DXG-010', 'Enfermedad Infecciosa/Parasitaria (Viral, Bacteriana, Fúngica, Parasitaria)'), ('SAL-DXG-011', 'Trastorno Mental/Psiquiátrico (Depresión, Ansiedad, Bipolaridad, Esquizofrenia)'), ('SAL-DXG-012', 'Enfermedad Dermatológica (Psoriasis, Eczema, Dermatitis, Acné Severo, Infecciones Cutáneas)'), ('SAL-DXG-013', 'Enfermedad Oftalmológica (Cataratas, Glaucoma, Retinopatía, Deg. Macular)'), ('SAL-DXG-014', 'Enfermedad Otorrinolaringológica (ORL - Sinusitis, Otitis, Vértigo, Amigdalitis)'), ('SAL-DXG-015', 'Enfermedad Hematológica (Anemia, Trastornos Coagulación, Leucemia, Linfoma)'), ('SAL-DXG-016', 'Traumatismo / Lesión Aguda (Contusión, Herida, Quemadura Leve)'), ('SAL-DXG-017', 'Condición Relacionada con Embarazo/Parto (Diagnóstico específico)'), ('SAL-DXG-018', 'Enfermedad Congénita / Genética (Síndrome específico)'), ('SAL-DXG-019', 'Enfermedad del Hígado / Hepatopatía (Hepatitis, Cirrosis)'), ('SAL-DXG-020', 'Trastornos del Sueño (Apnea, Insomnio Crónico)'), ('SAL-DXG-021', 'Obesidad Mórbida (Si es diagnóstico primario)'), ('SAL-DXG-022', 'Enfermedades de Transmisión Sexual (ETS - VIH, Sífilis, etc.)'), ('SAL-DXG-023', 'Trastornos de la Alimentación (Anorexia, Bulimia)'), ('SAL-DXG-024', 'Dependencia / Abuso de Sustancias (Alcoholismo, Drogadicción)'), ('SAL-DXG-025', 'Dolor Crónico No Oncológico (Lumbalgia, Neuralgia)'), ('SAL-DXG-026', 'Enfermedad Vascular Periférica (Insuficiencia Venosa, Arteriopatía)'), ('ODN-CON-001', 'Consulta / Revisión / Diagnóstico Odontológico'), ('ODN-PRO-001', 'Profilaxis / Limpieza Dental'), ('ODN-PRO-002', 'Aplicación de Flúor / Remineralización'), ('ODN-PRO-003', 'Sellantes de Fosas y Fisuras'), ('ODN-PRO-004', 'Radiografía Dental (Periapical, Panorámica, Cefálica, CBCT)'), ('ODN-PRO-005', 'Tartrectomía / Eliminación de Cálculo Supragingival'), ('ODN-DXG-001', 'Caries Dental (Especificar Superficie/Diente)'), ('ODN-TRT-001', 'Obturación / Restauración (Resina, Amalgama, Ionómero)'), ('ODN-DXG-002', 'Pulpitis / Necrosis Pulpar / Dolor Dental Agudo'), ('ODN-TRT-002', 'Tratamiento de Conducto / Endodoncia (Uni/Multi Radicular)'), ('ODN-TRT-003', 'Apicoformación / Apexificación / Pulpotomía'), ('ODN-TRT-004', 'Recubrimiento Pulpar (Directo/Indirecto)'), ('ODN-TRT-018', 'Retratamiento Endodóntico'), ('ODN-TRT-019', 'Cirugía Apical / Apicectomía'), ('ODN-DXG-003', 'Gingivitis / Inflamación Gingival'), ('ODN-DXG-004', 'Periodontitis (Leve, Moderada, Severa)'), ('ODN-TRT-005', 'Curetaje / Alisado Radicular / Raspado Periodontal'), ('ODN-TRT-006', 'Cirugía Periodontal (Colgajo, Injerto)'), ('ODN-TRT-007', 'Extracción Dental Simple'), ('ODN-TRT-008', 'Extracción Dental Quirúrgica / Tercer Molar / Diente Impactado'), ('ODN-TRT-009', 'Drenaje de Absceso Dental / Celulitis Facial'), ('ODN-TRT-010', 'Corona Dental (Metal-Porc, Zirconio, Emax, Temporal)'), ('ODN-TRT-011', 'Puente Fijo Dental (Especificar Unidades/Material)'), ('ODN-TRT-012', 'Prótesis Parcial Removible (Acrílica, Metálica)'), ('ODN-TRT-013', 'Prótesis Total Removible (Superior/Inferior)'), ('ODN-TRT-014', 'Implante Dental (Fase Quirúrgica / Fase Protésica)'), ('ODN-TRT-015', 'Ortodoncia (Instalación, Control, Retiro Aparatología)'), ('ODN-TRT-016', 'Férula Oclusal / Placa de Descarga / Guarda Nocturna'), ('ODN-TRT-017', 'Biopsia Oral / Estudio Histopatológico'), ('ODN-TRT-020', 'Blanqueamiento Dental (Si cubierto estético)'), ('ODN-TRT-021', 'Mantenimiento Periodontal'), ('ODN-DXG-005', 'Bruxismo / Apretamiento Dental'), ('ODN-DXG-006', 'Trastorno Temporomandibular (ATM) / Disfunción'), ('ODN-DXG-007', 'Lesiones Orales (Leucoplasia, Aftas, Mucocele, Liquen Plano)'), ('ODN-DXG-008', 'Maloclusión / Problema Ortodóntico'), ('ODN-DXG-009', 'Traumatismo Dental / Fractura Dental / Avulsión'), ('ODN-DXG-010', 'Quiste / Tumor Odontogénico'), ('ODN-DXG-011', 'Halitosis (Diagnóstico Causa Oral)'), ('ACC-TRA-001', 'Fractura (Especificar hueso y tipo: cerrada, abierta, etc.)'), ('ACC-TRA-002', 'Luxación / Dislocación Articular (Especificar articulación)'), ('ACC-TRA-003', 'Esguince / Distensión / Desgarro (Ligamento, Músculo, Tendón)'), ('ACC-TRA-004', 'Herida Abierta / Laceración / Abrasión / Avulsión'), ('ACC-TRT-001', 'Sutura de Herida / Cierre Quirúrgico / Grapas'), ('ACC-TRA-005', 'Contusión / Hematoma Severo / Aplastamiento'), ('ACC-TRA-006', 'Traumatismo Craneoencefálico (TCE - Leve, Moderado, Severo, Conmoción)'), ('ACC-TRA-007', 'Traumatismo de Columna Vertebral / Lesión Medular / Hernia Discal Traumática'), ('ACC-TRA-008', 'Quemadura (Especificar grado, extensión y agente: térmica, química, eléctrica)'), ('ACC-TRA-009', 'Amputación Traumática'), ('ACC-TRA-010', 'Lesión por Cuerpo Extraño (Ojo, Piel, Vía aérea, Digestiva)'), ('ACC-TRA-011', 'Mordedura (Animal / Humana)'), ('ACC-TRA-012', 'Picadura / Reacción Alérgica Grave (Insecto, Alimento, Medicamento)'), ('ACC-TRA-013', 'Asfixia / Ahogamiento / Estrangulamiento / Inhalación Humo'), ('ACC-TRA-014', 'Intoxicación / Envenenamiento Accidental (Químicos, Alimentos, Gases)'), ('ACC-TRA-015', 'Lesión por Esfuerzo Repetitivo / Sobrecarga Laboral/Deportiva'), ('ACC-TRA-016', 'Caída de Altura / Accidente Laboral Específico'), ('ACC-TRA-017', 'Electrocución'), ('ACC-TRA-018', 'Accidente de Tránsito (Peatón, Ciclista, Ocupante - Lesiones)'), ('ACC-DXG-001', 'Invalidez Permanente Parcial por Accidente'), ('ACC-DXG-002', 'Invalidez Permanente Total por Accidente'), ('ACC-DXG-003', 'Muerte Accidental'), ('ACC-GAS-001', 'Gastos Médicos por Accidente (Consulta, Estudios, Terapia)'), ('ACC-GAS-002', 'Gastos de Rehabilitación Física / Ocupacional por Accidente'), ('ACC-GAS-003', 'Gastos de Traslado / Ambulancia Terrestre/Aérea por Accidente'), ('ACC-GAS-004', 'Renta Diaria por Hospitalización Accidental'), ('ACC-GAS-005', 'Gastos Dentales por Accidente'), ('ACC-GAS-006', 'Gastos Funerarios por Muerte Accidental'), ('VID-FAL-001', 'Fallecimiento por Enfermedad'), ('VID-FAL-002', 'Fallecimiento por Causa Natural (Vejez)'), ('VID-INV-001', 'Invalidez Total y Permanente por Enfermedad'), ('VID-INV-002', 'Enfermedad Grave / Crítica (Diagnóstico - Ej: Cáncer, ACV, IAM, Renal Crónico)'), ('VID-ADE-001', 'Adelanto de Suma Asegurada por Enfermedad Grave/Terminal'), ('VID-GAS-001', 'Gastos Funerarios (Cobertura Adicional Póliza Vida)'), ('VID-SOB-001', 'Beneficio por Sobrevivencia / Dotal'), ('VID-EDU-001', 'Fondo Educativo (por fallecimiento/invalidez tomador)'), ('SEP-SER-001', 'Servicios Funerarios Básicos (Ataúd, Sala, Traslado Local)'), ('SEP-SER-002', 'Servicios Funerarios Completos (Incluye Trámites, Religioso, Recordatorios)'), ('SEP-SER-003', 'Cremación y Urna Básica / Especial'), ('SEP-SER-004', 'Inhumación / Entierro (Apertura/Cierre Fosa)'), ('SEP-SER-005', 'Traslado Nacional / Internacional del Cuerpo / Cenizas'), ('SEP-SER-006', 'Adquisición / Alquiler / Mantenimiento de Parcela / Nicho'), ('SEP-SER-007', 'Gastos de Exhumación / Traslado de Restos'), ('SEP-REM-001', 'Reembolso Gastos Funerarios (Presentando Facturas)'), ('SEP-SER-008', 'Preparación / Embalsamamiento / Tanatopraxia'), ('SEP-SER-009', 'Servicios Adicionales (Flores, Coro, Catering, Obituario)'), ('SEP-SER-010', 'Asistencia Psicológica Duelo'), ('MAS-CON-001', 'Consulta Veterinaria por Enfermedad (Diagnóstico/Tratamiento)'), ('MAS-CON-002', 'Consulta Veterinaria por Accidente'), ('MAS-CON-003', 'Consulta Veterinaria de Emergencia / Hospitalización'), ('MAS-EST-001', 'Exámenes de Laboratorio Veterinario (Sangre, Orina, Heces, Biopsia)'), ('MAS-EST-002', 'Imagenología Veterinaria (Rayos X, Eco, TAC, RMN)'), ('MAS-TRT-001', 'Tratamiento Médico Ambulatorio (Medicamentos, Fluidos, Curas)'), ('MAS-TRT-002', 'Hospitalización Veterinaria (UCI, Monitoreo)'), ('MAS-TRT-003', 'Cirugía Veterinaria (Esterilización, Ortopédica, Tejidos Blandos, Ocular)'), ('MAS-TRT-004', 'Medicamentos Recetados Post-Consulta / Post-Operatorios'), ('MAS-TRT-005', 'Tratamiento por Envenenamiento / Intoxicación (Mascota)'), ('MAS-TRT-006', 'Eutanasia Humanitaria (Por razones médicas justificadas)'), ('MAS-PRE-001', 'Medicina Preventiva (Consulta Rutina, Vacunas, Desparasitación - Si cubierto)'), ('MAS-ODN-001', 'Tratamiento Odontológico Veterinario (Limpieza, Extracción, Endodoncia)'), ('MAS-REH-001', 'Fisioterapia / Rehabilitación Veterinaria'), ('MAS-CIV-001', 'Responsabilidad Civil (Daños materiales/lesiones causados por la mascota a terceros)'), ('MAS-HOS-001', 'Gastos de Guardería/Hospedaje por hospitalización del dueño'), ('MAS-EXT-001', 'Gastos por Extravío (Publicidad, Recompensa - Si cubierto)'), ('MAS-COMPORT-001', 'Terapia de Comportamiento / Adiestramiento (Si cubierto)'), ('MAS-DERMA-001', 'Tratamiento Dermatológico Veterinario (Alergias, Infecciones)'), ('VEH-COL-001', 'Colisión / Choque Leve (Daños propios)'), ('VEH-COL-002', 'Colisión / Choque Grave (Pérdida Parcial / Total Daños Propios)'), ('VEH-VOL-001', 'Volcamiento (Daños propios)'), ('VEH-ROB-001', 'Robo Total del Vehículo'), ('VEH-ROB-002', 'Robo Parcial / Hurto de Piezas / Accesorios (Sonido, Rines, Batería)'), ('VEH-INC-001', 'Incendio / Explosión del Vehículo (Parcial / Total)'), ('VEH-NAT-001', 'Daños por Fenómeno Natural (Inundación, Granizo, Viento, Sismo, Caída Árbol)'), ('VEH-CRI-001', 'Rotura / Reparación de Cristales (Parabrisas, Laterales, Techo Solar, Espejos)'), ('VEH-RCV-MAT-001', 'Responsabilidad Civil - Daños Materiales a Terceros (Vehículo, Propiedad)'), ('VEH-RCV-LES-001', 'Responsabilidad Civil - Lesiones / Muerte a Terceros (Peatones, Ocupantes otro vehículo)'), ('VEH-RCV-EXC-001', 'Responsabilidad Civil - Exceso de Límite (Si contratado)'), ('VEH-ASIS-001', 'Servicio de Grúa / Remolque (Local / Nacional)'), ('VEH-ASIS-002', 'Asistencia Vial (Cambio Neumático, Combustible, Batería, Cerrajería)'), ('VEH-ASIS-003', 'Asistencia Legal / Defensa Jurídica Accidente Tránsito'), ('VEH-ACC-PER-001', 'Accidentes Personales Ocupantes del Vehículo Asegurado'), ('VEH-GAS-MED-001', 'Gastos Médicos Ocupantes del Vehículo Asegurado'), ('VEH-PER-TOT-001', 'Pérdida Total por Daños Materiales Graves'), ('VEH-VAND-001', 'Actos Vandálicos / Malintencionados (Rayones, Roturas deliberadas)'), ('VEH-MOT-001', 'Avería Mecánica (Garantía Extendida / Cobertura Específica Motor/Caja)'), ('VEH-LLAN-001', 'Daño Accidental a Llantas / Rines'), ('VEH-CER-001', 'Gastos de Cerrajería Vehicular (Pérdida / Robo Llaves)'), ('VEH-REP-001', 'Vehículo de Reemplazo / Gastos de Movilización'), ('HOG-INC-001', 'Daños por Incendio / Rayo / Explosión (Edificación / Contenidos)'), ('HOG-AGU-001', 'Daños por Agua Accidental (Fuga Interna, Tuberías, Filtraciones Techo/Pared)'), ('HOG-AGU-002', 'Daños por Agua (Inundación Externa, Lluvias Intensas, Desbordamiento)'), ('HOG-ROB-001', 'Robo / Hurto dentro de la Vivienda (Con/Sin Forzamiento - Contenidos)'), ('HOG-ROB-002', 'Daños a Edificación durante Robo/Intento'), ('HOG-CRI-001', 'Rotura Accidental de Cristales (Ventanas, Puertas, Mesas, Vitrinas)'), ('HOG-EQU-001', 'Daño Accidental Equipo Electrónico / Línea Blanca (TV, Nevera, Lavadora)'), ('HOG-CIV-001', 'Responsabilidad Civil Familiar (Daños materiales/lesiones a terceros causados por habitantes/mascotas)'), ('HOG-NAT-001', 'Daños por Fenómeno Natural (Viento Fuerte, Granizo, Impacto Rayo, Deslizamiento)'), ('HOG-TERR-001', 'Daños por Terremoto / Temblor / Erupción Volcánica'), ('HOG-ELEC-001', 'Daños Eléctricos (Sobretensión, Cortocircuito - Aparatos Eléctricos)'), ('HOG-ASIS-001', 'Asistencia Domiciliaria Urgente (Plomería, Electricidad, Cerrajería, Vidriería)'), ('HOG-COL-001', 'Colapso Estructural / Daños a la Edificación (Causas Cubiertas)'), ('HOG-REM-001', 'Gastos de Remoción de Escombros post-siniestro'), ('HOG-ALO-001', 'Gastos de Alojamiento Temporal / Pérdida de Alquileres por Siniestro'), ('HOG-JAR-001', 'Daños a Jardines / Muros / Cercas Exteriores'), ('HOG-PLG-001', 'Control / Exterminación de Plagas (Si cubierto)'), ('HOG-VAND-001', 'Actos Vandálicos / Malintencionados (Grafiti, Daños a Fachada)'), ('HOG-ALIM-001', 'Daño a Alimentos Refrigerados por Falla Eléctrica'), ('PYM-INC-001', 'Daños Materiales por Incendio (Edificio, Mobiliario, Existencias, Maquinaria)'), ('PYM-ROB-001', 'Pérdidas por Robo con Forzamiento / Asalto (Mercancía, Dinero en Caja/Tránsito)'), ('PYM-ROB-002', 'Pérdidas por Asalto a Transportista de Valores / Empleado'), ('PYM-EQU-001', 'Daño / Avería Equipos Electrónicos (Computadoras, Servidores, POS, Equipos Médicos/Oficina)'), ('PYM-MAQ-001', 'Daño / Avería de Maquinaria Fija / Móvil'), ('PYM-CIV-GEN-001', 'Responsabilidad Civil General / Explotación (Daños a terceros en local/por operaciones)'), ('PYM-CIV-PRO-001', 'Responsabilidad Civil Productos (Daños causados por producto defectuoso)'), ('PYM-CIV-PAT-001', 'Responsabilidad Civil Patronal (Accidente laboral empleado)'), ('PYM-TRA-001', 'Pérdida o Daño de Mercancía en Tránsito (Transporte Propio / Contratado)'), ('PYM-LUC-001', 'Pérdida de Beneficios / Lucro Cesante (Interrupción del Negocio por siniestro cubierto)'), ('PYM-ROT-001', 'Rotura de Cristales / Avisos / Letreros / Fachadas'), ('PYM-FID-001', 'Infidelidad de Empleados / Deshonestidad (Robo interno)'), ('PYM-EQU-ROT-001', 'Rotura Accidental de Maquinaria (Cobertura Específica)'), ('PYM-ACC-CLI-001', 'Accidentes Personales Clientes / Visitantes en Local'), ('PYM-PAR-MAQ-001', 'Paralización de Maquinaria (Pérdida de Beneficios asociada)'), ('PYM-PER-ALQ-001', 'Pérdida de Alquileres (Inmueble Comercial arrendado)'), ('PYM-CONTAM-001', 'Contaminación Accidental (RC Ambiental PYME)'), ('RC-GEN-001', 'RC General - Daños Materiales a Terceros'), ('RC-GEN-002', 'RC General - Lesiones Corporales / Muerte a Terceros'), ('RC-PRO-MED-001', 'RC Profesional Médica / Sanitaria (Mala Praxis)'), ('RC-PRO-ABO-001', 'RC Profesional Abogados / Asesores Legales'), ('RC-PRO-ING-001', 'RC Profesional Ingenieros / Arquitectos / Constructores'), ('RC-PRO-CON-001', 'RC Profesional Contadores / Auditores / Consultores Financieros'), ('RC-PRO-TEC-001', 'RC Profesional Tecnológica / Errores y Omisiones TI (E&O)'), ('RC-D&O-001', 'RC Directores y Administradores (D&O - Decisiones Gerenciales)'), ('RC-EMP-001', 'RC Prácticas Laborales Indebidas (EPLI - Acoso, Discriminación)'), ('RC-PROD-001', 'RC Productos Defectuosos / Retiro de Productos'), ('RC-AMB-001', 'RC Ambiental / Contaminación Accidental Gradual/Súbita'), ('RC-CONDOM-001', 'RC Condominios / Juntas de Condominio (Áreas Comunes, Decisiones)'), ('RC-EVENTO-001', 'RC Eventos Temporales (Públicos/Privados)'), ('RC-CYBER-001', 'RC por Violación de Datos / Ciberseguridad (Frente a Terceros)'), ('FIN-FID-001', 'Fraude / Deshonestidad Empleados (Póliza Fidelity / BBB)'), ('FIN-CYB-001', 'Ciberataque / Violación de Datos (Gastos propios: forense, notificación, PR)'), ('FIN-CYB-002', 'Extorsión Cibernética / Ransomware (Pago rescate, restauración)'), ('FIN-CYB-003', 'Interrupción de Negocio por Ciberataque (Pérdida beneficios)'), ('FIN-CRED-001', 'Seguro de Crédito (Impago de Deudas Comerciales Cliente)'), ('FIN-CAU-001', 'Seguro de Caución / Garantía (Cumplimiento Contrato, Judicial, Aduanera)'), ('SPEC-MAR-CAR-001', 'Marítimo - Daño / Pérdida de Carga (Transporte Marítimo/Aéreo/Terrestre)'), ('SPEC-MAR-HUL-001', 'Marítimo - Daño Casco y Maquinaria Buques'), ('SPEC-AVI-001', 'Aviación - Daño Casco Aeronave / RC Pasajeros / Carga'), ('SPEC-ENG-CAR-001', 'Ingeniería - Todo Riesgo Construcción (CAR)'), ('SPEC-ENG-EAR-001', 'Ingeniería - Todo Riesgo Montaje (EAR)'), ('SPEC-AGR-001', 'Agrícola - Daño Cosecha / Pérdida Ganado (Clima, Plaga, Enfermedad)'), ('SPEC-EVE-001', 'Cancelación / Aplazamiento de Eventos (Causas Cubiertas)'), ('SPEC-LEG-001', 'Seguro de Defensa Jurídica / Gastos Legales'), ('SPEC-ARTE-001', 'Seguro de Obras de Arte / Colecciones Valiosas'), ('SPEC-TITU-001', 'Seguro de Títulos de Propiedad (Property Title Insurance)'), ('SPEC-K&R-001', 'Seguro de Secuestro y Rescate (Kidnap & Ransom)'), ('VIA-MED-001', 'Emergencia Médica / Enfermedad en Viaje (Gastos Médicos, Hospitalización)'), ('VIA-ACC-001', 'Accidente Personal en Viaje (Gastos Médicos, Incapacidad, Muerte)'), ('VIA-ODN-001', 'Emergencia Odontológica en Viaje (Dolor Agudo, Infección, Fractura)'), ('VIA-CAN-001', 'Cancelación / Interrupción de Viaje (Causas Cubiertas: Enfermedad, Familiar, etc.)'), ('VIA-EQU-PER-001', 'Pérdida Total / Parcial de Equipaje Facturado'), ('VIA-EQU-DEM-001', 'Demora en Entrega de Equipaje (Gastos Primera Necesidad)'), ('VIA-VUE-DEM-001', 'Demora de Vuelo (Gastos Alojamiento/Comida)'), ('VIA-VUE-CAN-001', 'Cancelación de Vuelo (Reembolso / Gastos Alternativos)'), ('VIA-VUE-CON-001', 'Pérdida de Conexión (Gastos Alojamiento/Transporte)'), ('VIA-REP-MED-001', 'Repatriación Sanitaria / Evacuación Médica Urgente'), ('VIA-REP-FUN-001', 'Repatriación Funeraria / Traslado de Restos Mortales'), ('VIA-DOC-001', 'Pérdida / Robo de Documentos / Pasaporte (Gastos Reposición)'), ('VIA-LEG-001', 'Asistencia Legal en Viaje (Civil / Penal Básico)'), ('VIA-ADE-001', 'Adelanto de Fondos / Pago de Fianza'), ('VIA-CIV-001', 'Responsabilidad Civil en Viaje (Daños a Terceros)'), ('ADM-REM-001', 'Reembolso General (No especificado - Usar con precaución)'), ('ADM-AVA-001', 'Solicitud / Trámite / Emisión Carta Aval'), ('ADM-ERR-001', 'Corrección / Ajuste Administrativo Póliza/Recibo/Datos'), ('ADM-INF-001', 'Solicitud de Información / Estado de Cuenta / Certificado Cobertura'), ('ADM-INV-001', 'Reclamación en Proceso de Investigación (Pendiente Dictamen)'), ('ADM-FRA-001', 'Reclamación Rechazada por Fraude / Exclusión Contractual'), ('ADM-WIT-001', 'Reclamación Retirada / Desistida por el Asegurado'), ('ADM-COM-001', 'Queja / Reclamo sobre Servicio / Atención al Cliente'), ('ADM-PAG-001', 'Problema / Consulta Relacionada con Pago de Prima / Cobranza'), ('ADM-CAN-POL-001', 'Solicitud de Cancelación de Póliza'), ('ADM-END-001', 'Solicitud de Endoso / Modificación de Póliza (Cambio Datos, Coberturas)'), ('OTR-NOCLASIF', 'Otro Diagnóstico / Causa No Clasificada (REQUIERE DESCRIPCIÓN DETALLADA)')], db_index=True, help_text='Diagnóstico principal estandarizado asociado a la reclamación.', max_length=225, null=True, verbose_name='Diagnóstico Principal')),
                ('estado', models.CharField(choices=[('ABIERTA', 'Abierta'), ('EN_PROCESO', 'En Proceso'), ('APROBADA', 'Aprobada'), ('RECHAZADA', 'Rechazada'), ('CERRADA', 'Cerrada'), ('PENDIENTE_DOCS', 'Pendiente de Documentos'), ('EN_ANALISIS', 'En Análisis'), ('ESCALADA', 'Escalada a Nivel Superior'), ('EN_ARBITRAJE', 'En Arbitraje'), ('SUSPENDIDA', 'Suspendida'), ('INVESTIGACION', 'En Investigación')], db_index=True, default='ABIERTA', help_text='Estado actual del proceso de la reclamación (ej. Abierta, Aprobada, Pagada).', max_length=50, verbose_name='Estado de la Reclamación')),
                ('descripcion_reclamo', models.TextField(help_text='Descripción detallada del motivo de la reclamación realizada por el cliente.', verbose_name='Descripción del Reclamo')),
                ('monto_reclamado', models.DecimalField(decimal_places=2, help_text='Monto solicitado por el cliente en la reclamación. Debe ser mayor a 0.', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Monto Reclamado')),
                ('fecha_reclamo', models.DateField(db_index=True, help_text='Fecha en que el cliente presentó o se registró la reclamación.', verbose_name='Fecha de Reclamación')),
                ('fecha_cierre_reclamo', models.DateField(blank=True, db_index=True, help_text='Fecha en que la reclamación fue resuelta o cerrada definitivamente.', null=True, verbose_name='Fecha de Cierre de Reclamación')),
                ('documentos_adjuntos', models.FileField(blank=True, help_text='Archivos PDF, JPG, PNG que soportan la reclamación. Tamaño máx: 10MB.', null=True, upload_to='reclamos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'png']), myapp.validators.validate_file_size], verbose_name='Documentos Adjuntos')),
                ('observaciones_internas', models.TextField(blank=True, help_text='Notas o comentarios internos del personal sobre la reclamación (no visibles al cliente).', null=True, verbose_name='Observaciones Internas')),
                ('observaciones_cliente', models.TextField(blank=True, help_text='Comentarios o respuestas proporcionadas al cliente sobre el estado o resolución de la reclamación.', null=True, verbose_name='Observaciones para el Cliente')),
                ('contrato_colectivo', models.ForeignKey(blank=True, help_text='Contrato colectivo bajo el cual se realiza la reclamación (si aplica).', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.contratocolectivo', verbose_name='Contrato Colectivo')),
                ('contrato_individual', models.ForeignKey(blank=True, help_text='Contrato individual bajo el cual se realiza la reclamación (si aplica).', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.contratoindividual', verbose_name='Contrato Individual')),
                ('usuario_asignado', models.ForeignKey(blank=True, help_text='Usuario del sistema responsable de gestionar esta reclamación.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Usuario Asignado a la Reclamación')),
            ],
            options={
                'verbose_name': 'Reclamación',
                'verbose_name_plural': 'Reclamaciones',
                'ordering': ['-fecha_reclamo'],
            },
        ),
        migrations.CreateModel(
            name='Pago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('activo', models.BooleanField(default=True, help_text='Indica si este registro de pago está activo/visible en el sistema.', verbose_name='Estado activo')),
                ('forma_pago', models.CharField(choices=[('TRANSFERENCIA', 'Transferencia Bancaria'), ('CHEQUE', 'Cheque'), ('EFECTIVO', 'Efectivo'), ('TARJETA_CREDITO', 'Tarjeta de Crédito'), ('TARJETA_DEBITO', 'Tarjeta de Débito'), ('PAGO_MOVIL', 'Pago Móvil'), ('OTRO', 'Otro Medio de Pago')], db_index=True, default='TRANSFERENCIA', help_text='Método utilizado para realizar el pago.', max_length=50, validators=[myapp.validators.validate_metodo_pago], verbose_name='Forma de Pago')),
                ('fecha_pago', models.DateField(db_index=True, help_text='Fecha efectiva del pago.', verbose_name='Fecha de Pago')),
                ('monto_pago', models.DecimalField(db_index=True, decimal_places=2, help_text='Monto exacto pagado (> 0).', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Monto del Pago')),
                ('aplica_igtf_pago', models.BooleanField(default=False, help_text='Marcar si este pago específico genera IGTF.', verbose_name='¿Pago sujeto a IGTF?')),
                ('referencia_pago', models.CharField(blank=True, help_text='Identificador único del pago (ej. N° transferencia).', max_length=100, verbose_name='Referencia de Pago')),
                ('fecha_notificacion_pago', models.DateField(blank=True, help_text='Fecha registro del pago en sistema.', null=True, verbose_name='Fecha de Notificación de Pago')),
                ('observaciones_pago', models.TextField(blank=True, help_text='Notas adicionales sobre el pago.', null=True, verbose_name='Observaciones del Pago')),
                ('documentos_soporte_pago', models.FileField(blank=True, help_text='Archivos adjuntos (comprobante). PDF, JPG, PNG. Max 10MB.', null=True, upload_to='documentos_pagos/', validators=[myapp.validators.validate_file_size, myapp.validators.validate_file_type], verbose_name='Documentos de Soporte del Pago')),
                ('factura', models.ForeignKey(blank=True, help_text='Factura abonada (si aplica).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pagos', to='myapp.factura', verbose_name='Factura Asociada')),
                ('reclamacion', models.ForeignKey(blank=True, help_text='Reclamación pagada (si aplica).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pagos', to='myapp.reclamacion')),
            ],
            options={
                'verbose_name': 'Pago Registrado',
                'verbose_name_plural': 'Pagos Registrados',
                'ordering': ['-fecha_pago'],
            },
        ),
        migrations.CreateModel(
            name='RegistroComision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_comision', models.CharField(choices=[('DIRECTA', 'Comisión Directa'), ('OVERRIDE', 'Comisión de Override')], max_length=10, verbose_name='Tipo de Comisión')),
                ('porcentaje_aplicado', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Porcentaje Aplicado (%)')),
                ('monto_base_calculo', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Monto Base para Cálculo')),
                ('monto_comision', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Monto de la Comisión')),
                ('fecha_calculo', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Cálculo')),
                ('fecha_pago_a_intermediario', models.DateField(blank=True, null=True, verbose_name='Fecha de Pago a Intermediario')),
                ('estatus_pago_comision', models.CharField(choices=[('PENDIENTE', 'Pendiente de Pago'), ('PAGADA', 'Pagada'), ('ANULADA', 'Anulada')], default='PENDIENTE', max_length=20, verbose_name='Estatus del Pago de Comisión')),
                ('comprobante_pago', models.FileField(blank=True, help_text='Comprobante de la liquidación (PDF, JPG, PNG. Max 10MB).', null=True, upload_to='comprobantes_comisiones/', validators=[myapp.validators.validate_file_size, myapp.validators.validate_file_type], verbose_name='Comprobante de Pago de Comisión')),
                ('contrato_colectivo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comisiones_generadas', to='myapp.contratocolectivo')),
                ('contrato_individual', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comisiones_generadas', to='myapp.contratoindividual')),
                ('factura_origen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comisiones_asociadas', to='myapp.factura', verbose_name='Factura que Originó la Comisión')),
                ('intermediario', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='comisiones_ganadas', to='myapp.intermediario', verbose_name='Intermediario Beneficiario')),
                ('intermediario_vendedor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ventas_para_override', to='myapp.intermediario', verbose_name='Intermediario Vendedor (si aplica override)')),
                ('pago_cliente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comisiones_originadas', to='myapp.pago', verbose_name='Pago del Cliente que Originó la Comisión')),
                ('usuario_que_liquido', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comisiones_liquidadas_por_usuario', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que Liquidó la Comisión')),
            ],
            options={
                'verbose_name': 'Registro de Comisión',
                'verbose_name_plural': 'Registros de Comisiones',
                'ordering': ['-fecha_calculo'],
            },
        ),
        migrations.CreateModel(
            name='Tarifa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(db_index=True, max_length=100, verbose_name='Primer Nombre')),
                ('segundo_nombre', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Nombre')),
                ('primer_apellido', models.CharField(db_index=True, max_length=100, verbose_name='Primer Apellido')),
                ('segundo_apellido', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Segundo Apellido')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora en que se creó este registro (automático).', verbose_name='Fecha Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la última modificación de este registro (automático).', verbose_name='Fecha de Modificación')),
                ('activo', models.BooleanField(default=True, help_text='Indica si esta tarifa está actualmente activa y disponible para ser utilizada en cálculos.', verbose_name='Activo')),
                ('codigo_tarifa', models.CharField(db_index=True, editable=False, help_text='Identificador único de la tarifa (Auto-generado).', max_length=50, unique=True, verbose_name='Código de Tarifa')),
                ('rango_etario', models.CharField(choices=[('0-17', '0-17 años'), ('18-25', '18-25 años'), ('26-35', '26-35 años'), ('36-45', '36-45 años'), ('46-55', '46-55 años'), ('56-65', '56-65 años'), ('66-70', '66-70 años'), ('71-75', '71-75 años'), ('76-80', '76-80 años'), ('81-89', '81-89 años'), ('90-99', '90-99 años')], help_text='Grupo de edad específico al que aplica esta tarifa.', max_length=10)),
                ('ramo', models.CharField(choices=[('HCM', 'Hospitalización, Cirugía y Maternidad (HCM)'), ('VIDA', 'Vida'), ('VEHICULOS', 'Vehículos'), ('HOGAR', 'Hogar'), ('PYME', 'Pequeña y Mediana Empresa (PYME)'), ('ACCIDENTES_PERSONALES', 'Accidentes Personales'), ('SEPELIO', 'Sepelio'), ('VIAJES', 'Viajes'), ('EDUCATIVO', 'Educativo'), ('MASCOTAS', 'Mascotas'), ('OTROS', 'Otros Ramos')], help_text='Tipo de seguro o servicio (ramo) al que aplica esta tarifa.', max_length=50)),
                ('fecha_aplicacion', models.DateField(db_index=True, help_text='Fecha a partir de la cual esta tarifa entra en vigencia o es aplicable.', verbose_name='Fecha de Aplicación de la Tarifa')),
                ('monto_anual', models.DecimalField(db_index=True, decimal_places=2, help_text='Monto base anual de la tarifa. Utilizado para calcular valores fraccionados. Debe ser mayor a 0.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Monto Anual')),
                ('tipo_fraccionamiento', models.CharField(blank=True, choices=[('MENSUAL', 'Mensual'), ('TRIMESTRAL', 'Trimestral'), ('SEMESTRAL', 'Semestral'), ('ANUAL', 'Anual'), ('CONTADO', 'Contado (Pago único)')], help_text='Indica si esta tarifa es específica para un pago fraccionado (ej. Mensual, Trimestral). Dejar en blanco si es la tarifa base anual.', max_length=50, null=True, verbose_name='Tipo de Fraccionamiento')),
            ],
            options={
                'verbose_name': 'Tarifa',
                'verbose_name_plural': 'Tarifas',
                'ordering': ['ramo', 'rango_etario', '-fecha_aplicacion'],
                'indexes': [models.Index(fields=['codigo_tarifa'], name='tarifa_code_idx'), models.Index(fields=['monto_anual'], name='tarifa_monto_idx'), models.Index(fields=['ramo', 'rango_etario', 'fecha_aplicacion'], name='myapp_tarif_ramo_b6ec92_idx'), models.Index(fields=['activo'], name='myapp_tarif_activo_8f6472_idx'), models.Index(fields=['primer_apellido', 'primer_nombre'], name='myapp_tarif_primer__c8242f_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('tipo_fraccionamiento__isnull', True)), fields=('ramo', 'rango_etario', 'fecha_aplicacion'), name='unique_tarifa_base_condicional'), models.UniqueConstraint(condition=models.Q(('tipo_fraccionamiento__isnull', False)), fields=('ramo', 'rango_etario', 'fecha_aplicacion', 'tipo_fraccionamiento'), name='unique_tarifa_con_fraccionamiento')],
            },
        ),
        migrations.AddField(
            model_name='contratoindividual',
            name='tarifa_aplicada',
            field=models.ForeignKey(help_text='La tarifa utilizada para calcular el costo inicial/renovado.', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_set', related_query_name='contrato_%(class)s', to='myapp.tarifa', verbose_name='Tarifa Aplicada'),
        ),
        migrations.AddField(
            model_name='contratocolectivo',
            name='tarifa_aplicada',
            field=models.ForeignKey(help_text='La tarifa utilizada para calcular el costo inicial/renovado.', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_set', related_query_name='contrato_%(class)s', to='myapp.tarifa', verbose_name='Tarifa Aplicada'),
        ),
        migrations.CreateModel(
            name='AuditoriaSistema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_accion', models.CharField(blank=True, choices=[('LOGIN', 'Inicio de Sesión'), ('LOGOUT', 'Cierre de Sesión'), ('CREACION', 'Creación de Registro'), ('MODIFICACION', 'Modificación de Registro'), ('ELIMINACION', 'Eliminación de Registro'), ('CONSULTA', 'Consulta de Registro'), ('EXPORTACION', 'Exportación de Datos'), ('IMPORTACION', 'Importación de Datos'), ('ERROR', 'Error del Sistema'), ('OTRO', 'Otra Acción')], db_index=True, help_text='Tipo de operación registrada (ej. CREACION, LOGIN, ERROR).', max_length=50, null=True, verbose_name='Tipo de Acción')),
                ('resultado_accion', models.CharField(blank=True, choices=[('EXITO', 'Éxito'), ('ERROR', 'Error')], db_index=True, help_text='Indica si la acción registrada fue exitosa o fallida.', max_length=50, null=True, verbose_name='Resultado de Acción')),
                ('tabla_afectada', models.CharField(blank=True, db_index=True, help_text='Nombre de la tabla de la base de datos modificada por la acción.', max_length=100, null=True, verbose_name='Tabla Afectada')),
                ('registro_id_afectado', models.IntegerField(blank=True, db_index=True, help_text='ID (clave primaria) del registro específico afectado por la acción.', null=True, verbose_name='ID Registro Afectado')),
                ('detalle_accion', models.TextField(blank=True, help_text='Descripción detallada de la acción realizada o del error ocurrido.', null=True, verbose_name='Detalle de la Acción')),
                ('direccion_ip', models.GenericIPAddressField(blank=True, db_index=True, help_text='Dirección IP desde la cual se originó la acción.', null=True, verbose_name='Dirección IP')),
                ('agente_usuario', models.TextField(blank=True, help_text='Información del navegador o cliente utilizado para realizar la acción.', null=True, verbose_name='Agente de Usuario (User Agent)')),
                ('tiempo_inicio', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora exactas en que se inició el registro de la acción (automático).', verbose_name='Tiempo de Inicio')),
                ('tiempo_final', models.DateTimeField(blank=True, default=None, help_text='Fecha y hora en que finalizó la operación registrada (si aplica).', null=True, verbose_name='Tiempo de Finalización')),
                ('control_fecha_actual', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Marca de tiempo de control al momento de crear el registro de auditoría (automático).', verbose_name='Control Fecha Actual')),
                ('usuario', models.ForeignKey(help_text='Usuario que realizó la acción registrada (si aplica).', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Auditoría del Sistema',
                'verbose_name_plural': 'Auditorías del Sistema (Hoja1)',
                'ordering': ['-tiempo_inicio'],
                'permissions': [('view_exportacion', 'Puede exportar datos')],
                'indexes': [models.Index(fields=['tipo_accion', 'resultado_accion'], name='myapp_audit_tipo_ac_7292c2_idx'), models.Index(fields=['direccion_ip', 'usuario'], name='myapp_audit_direcci_e57514_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='intermediario',
            index=models.Index(fields=['codigo'], name='myapp_inter_codigo_61a1ab_idx'),
        ),
        migrations.AddIndex(
            model_name='intermediario',
            index=models.Index(fields=['nombre_completo'], name='myapp_inter_nombre__409cf8_idx'),
        ),
        migrations.AddIndex(
            model_name='intermediario',
            index=models.Index(fields=['rif'], name='myapp_inter_rif_ff7761_idx'),
        ),
        migrations.AddIndex(
            model_name='intermediario',
            index=models.Index(fields=['porcentaje_comision', 'activo'], name='myapp_inter_porcent_e8e4e0_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['numero_recibo'], name='myapp_factu_numero__7644df_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['relacion_ingreso'], name='myapp_factu_relacio_7d8f4a_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['contrato_individual'], name='myapp_factu_contrat_5ba6c9_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['contrato_colectivo'], name='myapp_factu_contrat_beb535_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['intermediario'], name='myapp_factu_interme_10c46e_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['vigencia_recibo_desde', 'vigencia_recibo_hasta'], name='myapp_factu_vigenci_794440_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['pagada', 'activo'], name='myapp_factu_pagada_2e805d_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['aplica_igtf', 'pagada'], name='myapp_factu_aplica__689af1_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadoindividual',
            index=models.Index(fields=['tipo_identificacion', 'cedula'], name='myapp_afili_tipo_id_c9c345_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadoindividual',
            index=models.Index(fields=['primer_apellido', 'primer_nombre'], name='myapp_afili_primer__db4679_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadoindividual',
            index=models.Index(fields=['fecha_nacimiento'], name='myapp_afili_fecha_n_408efe_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadoindividual',
            index=models.Index(fields=['fecha_ingreso'], name='myapp_afili_fecha_i_c52559_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadocolectivo',
            index=models.Index(fields=['rif'], name='myapp_afili_rif_57ee55_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadocolectivo',
            index=models.Index(fields=['razon_social'], name='myapp_afili_razon_s_10975c_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadocolectivo',
            index=models.Index(fields=['rif', 'razon_social'], name='myapp_afili_rif_c5a5aa_idx'),
        ),
        migrations.AddIndex(
            model_name='afiliadocolectivo',
            index=models.Index(fields=['activo'], name='myapp_afili_activo_b61962_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['nivel_acceso', 'activo'], name='myapp_usuar_nivel_a_955101_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['departamento', 'activo'], name='myapp_usuar_departa_f6ae51_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['email'], name='myapp_usuar_email_bbb860_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['primer_apellido', 'primer_nombre'], name='myapp_usuar_primer__8c26be_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['numero_reclamacion'], name='myapp_recla_numero__af21db_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['tipo_reclamacion', 'estado'], name='myapp_recla_tipo_re_a36666_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['fecha_reclamo', 'fecha_cierre_reclamo'], name='myapp_recla_fecha_r_213a8b_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['contrato_individual'], name='myapp_recla_contrat_5efe4e_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['contrato_colectivo'], name='myapp_recla_contrat_6a8fae_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['usuario_asignado'], name='myapp_recla_usuario_e05981_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['monto_reclamado'], name='myapp_recla_monto_r_f18c25_idx'),
        ),
        migrations.AddIndex(
            model_name='reclamacion',
            index=models.Index(fields=['activo'], name='myapp_recla_activo_d74425_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['forma_pago', 'fecha_pago'], name='myapp_pago_forma_p_3cff80_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['referencia_pago'], name='myapp_pago_referen_093c2c_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['reclamacion'], name='myapp_pago_reclama_650f4c_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['factura'], name='myapp_pago_factura_3c2a58_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['fecha_pago', 'monto_pago'], name='myapp_pago_fecha_p_8a7147_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['activo'], name='myapp_pago_activo_47e083_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['aplica_igtf_pago'], name='myapp_pago_aplica__715b01_idx'),
        ),
        migrations.AddIndex(
            model_name='contratoindividual',
            index=models.Index(fields=['estatus'], name='myapp_contr_estatus_f2ee29_idx'),
        ),
        migrations.AddIndex(
            model_name='contratoindividual',
            index=models.Index(fields=['contratante_cedula'], name='myapp_contr_contrat_220003_idx'),
        ),
        migrations.AddIndex(
            model_name='contratoindividual',
            index=models.Index(fields=['activo'], name='myapp_contr_activo_ef92fd_idx'),
        ),
        migrations.AddIndex(
            model_name='contratocolectivo',
            index=models.Index(fields=['tipo_empresa', 'cantidad_empleados'], name='myapp_contr_tipo_em_38fbb3_idx'),
        ),
        migrations.AddIndex(
            model_name='contratocolectivo',
            index=models.Index(fields=['fecha_emision', 'monto_total'], name='myapp_contr_fecha_e_a4cb38_idx'),
        ),
        migrations.AddIndex(
            model_name='contratocolectivo',
            index=models.Index(fields=['rif'], name='myapp_contr_rif_8047ed_idx'),
        ),
        migrations.AddIndex(
            model_name='contratocolectivo',
            index=models.Index(fields=['activo'], name='myapp_contr_activo_7f0c78_idx'),
        ),
        migrations.AddIndex(
            model_name='contratocolectivo',
            index=models.Index(fields=['tarifa_aplicada'], name='myapp_contr_tarifa__a74d7a_idx'),
        ),
    ]
